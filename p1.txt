
                        Advanced Operating Systems
                                 Project 1
                                 Fall 2020


turnin id:  aos_p1


Write a C/C++/python3 program that implements a portion of your own shell.
It should print a prompt which is the concatenation of your login id and
the char string "_sh> " (note the blank at the end). Thus, if I were to
implement the project, the prompt I would print would be "rbutler_sh> "
without the quotes.  However, the shell should not print a prompt if
its stdin is not a tty or if it is given a single command-line arg which
is a file to accept commands from instead.  It is valid to assume that no
command-line will be more that 64 bytes.

For ease of parsing, you may assume that all command-line values are
separated by at least one char of white-space and that a single command
is on a single line.  A # anywhere on the line marks the beginning of a
comment and thus the end of the line.

The shell should provide these *builtin* commands:
    exit (or end-of-file, e.g. cntl-D on tty)
    envset VAR VAL
        set (synonym for envset)
    envunset VAR
        unset (synonym for unenvset)
    envprt (print all variables and their values in the environment)
    prt word $var  (substitutes value of var)
        if $var is undefined, use an empty string
    witch (like which :)  (looks thru AOSPATH for a cmd - see below)
    pwd
    cd

Builtin commands are executed in your shell's process.  Variables can be
used on any command-line, but no variable value can contain a $ that might
cause recursive variable interpolation.  Undefined vars should cause an
empty string to be used rather than causing failure.

A valid value on a command-line might be:
    cd $ADIR/$nextdir    ## assuming both vars have been defined
where both ADIR and nextdir must be interpolated.
Valid vars consist of alphas, numerics, and underscores, beginning with
alpha or underscore.

The shell should provide these environment variables at start-up:
    AOSPATH (default is /bin:/usr/bin)
    AOSCWD  (current working directory) (cd should cause it to be updated)
    AOSHOME (originally copied from HOME in the shell that starts it up)
And, those vars should be the ONLY ones at start-up.
So, we should be able to immediately execute:
    prt $AOSPATH $AOSCWD $AOSHOME

For this project, you do NOT have to execute any commands other than those
built into the shell.


Submitting the project for grading:

The project should compile and link as p1.

You should turnin a tar file containing all of the required files.

To build the project, I will cd to my directory containing your files
and simply type:

    rm -rf p1
    rm -f *.o
    make

It should build an executable named p1.
